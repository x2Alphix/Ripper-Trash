local library = loadstring(game:HttpGet('https://raw.githubusercontent.com/wowsecret4869/justUIing/refs/heads/main/UI.js'))()

local Window = library:Window({
    Logo = 122504813117904,
    Keybind = Enum.KeyCode.LeftControl,
    Size = UDim2.new(0, 600,1.0, 0)
})
local Tab = Window:Tab({Title = 'Main'})
local Tab_1 = Window:Tab({Title = 'Local Player'})

local ContextActionService = cloneref(game:GetService('ContextActionService'))
local VirtualInputManager = cloneref(game:GetService('VirtualInputManager'))
local ReplicatedStorage = cloneref(game:GetService('ReplicatedStorage'))
local UserInputService = cloneref(game:GetService('UserInputService'))
local ContentProvider = cloneref(game:GetService('ContentProvider'))
local TweenService = cloneref(game:GetService('TweenService'))
local HttpService = cloneref(game:GetService('HttpService'))
local TextService = cloneref(game:GetService('TextService'))
local GuiService = cloneref(game:GetService('GuiService'))
local RunService = cloneref(game:GetService('RunService'))
local Workspace = cloneref(game:GetService('Workspace'))
local Lighting = cloneref(game:GetService('Lighting'))
local Players = cloneref(game:GetService('Players'))
local CoreGui = cloneref(game:GetService('CoreGui'))
local Debris = cloneref(game:GetService('Debris'))
local Player = Players.LocalPlayer

local Last_Input = UserInputService:GetLastInputType()
local Grab_Parry
local Parries = 0

local Runtime = Workspace.Runtime
local Speed_Divisor_Multiplier = 1.1
local LobbyAP_Speed_Divisor_Multiplier = 1.1
local firstParryFired = false
local ParryThreshold = 1
local firstParryType = 'F_Key'

local function performFirstPress(parryType)
    if parryType == 'F_Key' then
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.F, false, nil)
    elseif parryType == 'Left_Click' then
        VirtualInputManager:SendMouseButtonEvent(0, 0, 0, true, game, 0)
    elseif parryType == 'Navigation' then
        GuiService.SelectedObject = Players.LocalPlayer.PlayerGui.Hotbar.Block
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
        task.wait(0.01)
        GuiService.SelectedObject = nil
    end
end

if not LPH_OBFUSCATED then
    function LPH_JIT(...) return ... end
    function LPH_JIT_MAX(...) return ... end
    function LPH_NO_VIRTUALIZE(...) return ... end
end

local PropertyChangeOrder = {}

local HashOne
local HashTwo
local HashThree

LPH_NO_VIRTUALIZE(function()
    for Index, Value in next, getgc() do
        if rawequal(typeof(Value), 'function') and islclosure(Value) and getrenv().debug.info(Value, 's'):find('SwordsController') then
            if rawequal(getrenv().debug.info(Value, 'l'), 276) then
                HashOne = getconstant(Value, 62)
                HashTwo = getconstant(Value, 64)
                HashThree = getconstant(Value, 65)
            end
        end
    end
end)()

LPH_NO_VIRTUALIZE(function()
    for Index, Object in next, game:GetDescendants() do
        if Object:IsA('RemoteEvent') and string.find(Object.Name, '\n') then
            Object.Changed:Once(function()
                table.insert(PropertyChangeOrder, Object)
            end)
        end
    end
end)()

repeat task.wait()
until #PropertyChangeOrder == 3

local ShouldPlayerJump = PropertyChangeOrder[1]
local MainRemote = PropertyChangeOrder[2]
local GetOpponentPosition = PropertyChangeOrder[3]

local Parry_Key

for _, Value in pairs(getconnections(game:GetService('Players').LocalPlayer.PlayerGui.Hotbar.Block.Activated)) do
    if Value and Value.Function and not iscclosure(Value.Function)  then
        for _,Value2 in pairs(getupvalues(Value.Function)) do
            if type(Value2) == 'function' then
                Parry_Key = getupvalue(getupvalue(Value2, 2), 17)
            end
        end
    end
end

local function Parry(...)
    ShouldPlayerJump:FireServer(HashOne, Parry_Key, ...)
    MainRemote:FireServer(HashTwo, Parry_Key, ...)
    GetOpponentPosition:FireServer(HashThree, Parry_Key, ...)
end

local Animation = {}
Animation.storage = {}
Animation.current = nil
Animation.track = nil

for _, v in pairs(game:GetService('ReplicatedStorage').Misc.Emotes:GetChildren()) do
    if v:IsA('Animation') and v:GetAttribute('EmoteName') then
        local Emote_Name = v:GetAttribute('EmoteName')
        Animation.storage[Emote_Name] = v
    end
end

local Emotes_Data = {}

for Object in pairs(Animation.storage) do
    table.insert(Emotes_Data, Object)
end

table.sort(Emotes_Data)

local Auto_Parry = {}
local Connections_Manager = {}
local Selected_Parry_Type = 'Camera'

local Parried = false
local deathshit = false
local Infinity = false
local timehole = false
local Last_Parry = 0

local CurrentBall = nil

local PlayerGui = Player:WaitForChild('PlayerGui')
local Hotbar = PlayerGui:WaitForChild('Hotbar')

local ParryCD = Hotbar.Block.UIGradient
local AbilityCD = Hotbar.Ability.UIGradient

local isMobile = UserInputService.TouchEnabled and not UserInputService.MouseEnabled

local sword_animation_type = 'GrabParry'
local GrabParryAnimation = game:GetService('ReplicatedStorage').Shared.SwordAPI.Collection.Default:FindFirstChild('GrabParry')
local GetSword = game:GetService('ReplicatedStorage').Shared.ReplicatedInstances.Swords.GetSword:Invoke(Player.Character:GetAttribute('CurrentlyEquippedSword'))
local Tornado_Time = tick()
local LR, VelHist, LastWarp, LastCurve = 0, {}, tick(), tick()

do-- anti afk
    for _, v in next, getconnections(Player.Idled) do
        v:Disable()
    end
end

function Auto_Parry.Parry_Animation()
    GetSword = game:GetService('ReplicatedStorage').Shared.ReplicatedInstances.Swords.GetSword:Invoke(Player.Character:GetAttribute('CurrentlyEquippedSword'))
    if not Player.Character:GetAttribute('CurrentlyEquippedSword') then
        return
    end
    if not game:GetService('ReplicatedStorage').Shared.SwordAPI.Collection.Default:FindFirstChild('GrabParry') then
        return
    end
    if not GetSword or not GetSword['AnimationType'] then
        return
    end

    for _, v in pairs(game:GetService('ReplicatedStorage').Shared.SwordAPI.Collection:GetChildren()) do
        if v.Name == GetSword['AnimationType'] then
            if v:FindFirstChild('GrabParry') or v:FindFirstChild('Grab') then
                sword_animation_type = 'GrabParry'
                if v:FindFirstChild('Grab') then
                    sword_animation_type = 'Grab'
                end

                GrabParryAnimation = v[sword_animation_type]
            end
        end
    end

    Grab_Parry = Player.Character.Humanoid.Animator:LoadAnimation(GrabParryAnimation)
    Grab_Parry:Play()
end

function Auto_Parry.Play_Animation(v)
    local Animations = Animation.storage[v]

    if not Animations then
        return false
    end

    local Animator = Player.Character.Humanoid.Animator

    if Animation.track then
        Animation.track:Stop()
    end

    Animation.track = Animator:LoadAnimation(Animations)
    Animation.track:Play()

    Animation.current = v
end

function Auto_Parry.Get_Balls()
    local Balls = {}

    for _, Instance in pairs(Workspace.Balls:GetChildren()) do
        if Instance:GetAttribute('realBall') then
            Instance.CanCollide = false
            table.insert(Balls, Instance)
        end
    end
    return Balls
end

function Auto_Parry.Get_Ball()
    for _, Instance in pairs(Workspace.Balls:GetChildren()) do
        if Instance:GetAttribute('realBall') then
            Instance.CanCollide = false
            return Instance
        end
    end
end

function Auto_Parry.Lobby_Balls()
    for _, Instance in pairs(Workspace.TrainingBalls:GetChildren()) do
        if Instance:GetAttribute('realBall') then
            return Instance
        end
    end
end

function Auto_Parry.Closest_Player()
    local Max_Distance = math.huge
    local Found_Entity = nil

    for _, Entity in pairs(Workspace.Alive:GetChildren()) do
        if tostring(Entity) ~= tostring(Player) then
            if Entity.PrimaryPart then  -- Check if PrimaryPart exists
                local Distance = Player:DistanceFromCharacter(Entity.PrimaryPart.Position)
                if Distance < Max_Distance then
                    Max_Distance = Distance
                    Found_Entity = Entity
                end
            end
        end
    end

    return Found_Entity
end

function Auto_Parry:Get_Entity_Properties()
    Auto_Parry.Closest_Player()

    if not Auto_Parry.Closest_Player() then
        return false
    end

    local Entity_Velocity = Auto_Parry.Closest_Player().PrimaryPart.Velocity
    local Entity_Direction = (Player.Character.PrimaryPart.Position - Auto_Parry.Closest_Player().PrimaryPart.Position).Unit
    local Entity_Distance = (Player.Character.PrimaryPart.Position - Auto_Parry.Closest_Player().PrimaryPart.Position).Magnitude

    return {
        Velocity = Entity_Velocity,
        Direction = Entity_Direction,
        Distance = Entity_Distance
    }
end

function Auto_Parry.Parry_Data(Parry_Type)
    Auto_Parry.Closest_Player()
    
    local Events = {}
    local Camera = workspace.CurrentCamera
    local Vector2_Mouse_Location
    
    if Last_Input == Enum.UserInputType.MouseButton1 or (Enum.UserInputType.MouseButton2 or Last_Input == Enum.UserInputType.Keyboard) then
        local Mouse_Location = UserInputService:GetMouseLocation()
        Vector2_Mouse_Location = {Mouse_Location.X, Mouse_Location.Y}
    else
        Vector2_Mouse_Location = {Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2}
    end
    
    if isMobile then
        Vector2_Mouse_Location = {Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2}
    end
    
    local Players_Screen_Positions = {}
    for _, v in pairs(workspace.Alive:GetChildren()) do
        if v ~= Player.Character then
            local worldPos = v.PrimaryPart.Position
            local screenPos, isOnScreen = Camera:WorldToScreenPoint(worldPos)
            
            if isOnScreen then
                Players_Screen_Positions[v] = Vector2.new(screenPos.X, screenPos.Y)
            end
            
            Events[tostring(v)] = screenPos
        end
    end
    
    if Parry_Type == 'Camera' then
        return {0, Camera.CFrame, Events, Vector2_Mouse_Location}
    end
    
    if Parry_Type == 'Backwards' then
        local Backwards_Direction = Camera.CFrame.LookVector * -10000
        Backwards_Direction = Vector3.new(Backwards_Direction.X, 0, Backwards_Direction.Z)
        return {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + Backwards_Direction), Events, Vector2_Mouse_Location}
    end

    if Parry_Type == 'Straight' then
        local Aimed_Player = nil
        local Closest_Distance = math.huge
        local Mouse_Vector = Vector2.new(Vector2_Mouse_Location[1], Vector2_Mouse_Location[2])
        
        for _, v in pairs(workspace.Alive:GetChildren()) do
            if v ~= Player.Character then
                local worldPos = v.PrimaryPart.Position
                local screenPos, isOnScreen = Camera:WorldToScreenPoint(worldPos)
                
                if isOnScreen then
                    local playerScreenPos = Vector2.new(screenPos.X, screenPos.Y)
                    local distance = (Mouse_Vector - playerScreenPos).Magnitude
                    
                    if distance < Closest_Distance then
                        Closest_Distance = distance
                        Aimed_Player = v
                    end
                end
            end
        end
        
        if Aimed_Player then
            return {0, CFrame.new(Player.Character.PrimaryPart.Position, Aimed_Player.PrimaryPart.Position), Events, Vector2_Mouse_Location}
        else
            return {0, CFrame.new(Player.Character.PrimaryPart.Position, Auto_Parry.Closest_Player().PrimaryPart.Position), Events, Vector2_Mouse_Location}
        end
    end
    
    if Parry_Type == 'Random' then
        return {0, CFrame.new(Camera.CFrame.Position, Vector3.new(math.random(-4000, 4000), math.random(-4000, 4000), math.random(-4000, 4000))), Events, Vector2_Mouse_Location}
    end
    
    if Parry_Type == 'High' then
        local High_Direction = Camera.CFrame.UpVector * 10000
        return {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + High_Direction), Events, Vector2_Mouse_Location}
    end
    
    if Parry_Type == 'Left' then
        local Left_Direction = Camera.CFrame.RightVector * 10000
        return {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position - Left_Direction), Events, Vector2_Mouse_Location}
    end
    
    if Parry_Type == 'Right' then
        local Right_Direction = Camera.CFrame.RightVector * 10000
        return {0, CFrame.new(Camera.CFrame.Position, Camera.CFrame.Position + Right_Direction), Events, Vector2_Mouse_Location}
    end

    if Parry_Type == 'RandomTarget' then
        local candidates = {}
        for _, v in pairs(workspace.Alive:GetChildren()) do
            if v ~= Player.Character and v.PrimaryPart then
                local screenPos, isOnScreen = Camera:WorldToScreenPoint(v.PrimaryPart.Position)
                if isOnScreen then
                    table.insert(candidates, {
                        character = v,
                        screenXY  = { screenPos.X, screenPos.Y }
                    })
                end
            end
        end
        if #candidates > 0 then
            local pick = candidates[ math.random(1, #candidates) ]
            local lookCFrame = CFrame.new(Player.Character.PrimaryPart.Position, pick.character.PrimaryPart.Position)
            return {0, lookCFrame, Events, pick.screenXY}
        else
            return {0, Camera.CFrame, Events, { Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2 }}
        end
    end
    
    return Parry_Type
end

function Auto_Parry.Parry(Parry_Type)
    local Parry_Data = Auto_Parry.Parry_Data(Parry_Type)

    if not firstParryFired then
        performFirstPress(firstParryType)
        firstParryFired = true
    else
        Parry(Parry_Data[1], Parry_Data[2], Parry_Data[3], Parry_Data[4])
    end

    if Parries > 7 then
        return false
    end
    if Parries >= 0 then
        Parries += 1
    else
        Parries = 0
    end


    task.delay(0.5, function()
        if Parries > 0 then
            Parries -= 1
        end
    end)
end

function Auto_Parry.Linear_Interpolation(a, b, time_volume)
    return a + (b - a) * time_volume
end

function Auto_Parry.Is_Curved()
    local Ball = Auto_Parry.Get_Ball()


    if not Ball or not Ball:FindFirstChild('zoomies') then return false end
    
    local z, v = Ball.zoomies, Ball.zoomies.VectorVelocity
    local s, d = v.Magnitude, v.Unit
    local r = Player.Character and Player.Character.PrimaryPart
    if not r then return false end
    
    local p, bp = r.Position, Ball.Position
    local dir, dist = (p - bp).Unit, (p - bp).Magnitude
    local dot = dir:Dot(d)
    local ping = game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue()
    
    if ping > 150 then 
        ping *= 1.1 
    elseif ping > 200 then 
        ping *= 1.25 
    end
    
    table.insert(VelHist, v)
    if #VelHist > 4 then table.remove(VelHist, 1) end
    
    local rt = dist / s - ping / 985
    local dT = 15 - math.min(dist / 1000, 15) + math.min(s / 100, 40)
    
    if Ball:FindFirstChild('AeroDynamicSlashVFX') then
        Debris:AddItem(Ball.AeroDynamicSlashVFX, 0)
        Tornado_Time = tick()
    end
    
    if Runtime:FindFirstChild('Tornado') and (tick() - Tornado_Time) < ((Runtime.Tornado:GetAttribute('TornadoTime') or 1) + 0.314159) then
        return true
    end
    
    if s > 160 and rt > ping / 9.85 then
        local adjust = s < 300 and 15 or s < 600 and 16 or s < 1000 and 17 or s < 1500 and 19 or 20
        dT = math.max(dT - adjust, adjust)
    end
    
    if dist < dT then return false end
    
    local curve_time = s < 300 and rt / 1.2 or s < 450 and rt / 1.21 or s < 600 and rt / 1.335 or rt / 1.5
    if (tick() - LastCurve) < curve_time then return true end
    
    local dth = 0.485 - ping / 985
    local diff = dir:Dot((d - v.Unit).Unit)
    if (dot - diff) < dth then return true end
    
    local rad = math.deg(math.asin(math.clamp(dot, -1, 1)))
    LR = Auto_Parry.Linear_Interpolation(LR, rad, 0.8)
    
    local warp_time = s < 300 and rt / 1.185 or rt / 1.5
    local warp_thres = s < 300 and 0.0205 or 0.018
    if LR < warp_thres then LastWarp = tick() end
    if (tick() - LastWarp) < warp_time then return true end
    
    if #VelHist == 4 then
        local dv = function(i) return dir:Dot((d - VelHist[i].Unit).Unit) end
        if dot - dv(1) < dth or dot - dv(2) < dth then return true end
    end
    
    local hp = Vector3.new(p.X - bp.X, 0, p.Z - bp.Z).Unit
    local bd = Vector3.new(d.X, 0, d.Z).Unit
    if hp.Magnitude > 0 and bd.Magnitude > 0 then
        local back = math.deg(math.acos(math.clamp((-hp):Dot(bd), -1, 1)))
        if back < 90 - ping / 25 then return true end
    end
    
    return dot < dth
end

function Auto_Parry:Get_Ball_Properties()
    local Ball = Auto_Parry.Get_Ball()

    local Ball_Velocity = Vector3.zero
    local Ball_Origin = Ball

    local Ball_Direction = (Player.Character.PrimaryPart.Position - Ball_Origin.Position).Unit
    local Ball_Distance = (Player.Character.PrimaryPart.Position - Ball.Position).Magnitude
    local Ball_Dot = Ball_Direction:Dot(Ball_Velocity.Unit)

    return {
        Velocity = Ball_Velocity,
        Direction = Ball_Direction,
        Distance = Ball_Distance,
        Dot = Ball_Dot
    }
end

function Auto_Parry.Spam_Service(self)
    local Ball = Auto_Parry.Get_Ball()

    local Entity = Auto_Parry.Closest_Player()

    if not Ball then
        return false
    end

    if not Entity or not Entity.PrimaryPart then
        return false
    end

    local Spam_Accuracy = 0

    local Velocity = Ball.AssemblyLinearVelocity
    local Speed = Velocity.Magnitude

    local Direction = (Player.Character.PrimaryPart.Position - Ball.Position).Unit
    local Dot = Direction:Dot(Velocity.Unit)

    local Target_Position = Entity.PrimaryPart.Position
    local Target_Distance = Player:DistanceFromCharacter(Target_Position)

    local Maximum_Spam_Distance = self.Ping + math.min(Speed / 6, 95)

    if self.Entity_Properties.Distance > Maximum_Spam_Distance then
        return Spam_Accuracy
    end

    if self.Ball_Properties.Distance > Maximum_Spam_Distance then
        return Spam_Accuracy
    end

    if Target_Distance > Maximum_Spam_Distance then
        return Spam_Accuracy
    end

    local Maximum_Speed = 5 - math.min(Speed / 5, 5)
    local Maximum_Dot = math.clamp(Dot, -1, 0) * Maximum_Speed

    Spam_Accuracy = Maximum_Spam_Distance - Maximum_Dot

    return Spam_Accuracy
end

ReplicatedStorage.Remotes.DeathBall.OnClientEvent:Connect(function(c, d)
    if d then
        deathshit = true
    else
        deathshit = false
    end
end)

ReplicatedStorage.Remotes.InfinityBall.OnClientEvent:Connect(function(a, b)
    if b then
        Infinity = true
    else
        Infinity = false
    end
end)

ReplicatedStorage.Remotes.TimeHoleHoldBall.OnClientEvent:Connect(function(e, f)
    if f then
        timehole = true
    else
        timehole = false
    end
end)

local function GetBall()
    for _, Ball in ipairs(Workspace.Balls:GetChildren()) do
        if Ball:FindFirstChild('ff') then
            return Ball
        end
    end
    return nil
end

Workspace:WaitForChild('Balls').ChildAdded:Connect(function(Value)
    Value.ChildAdded:Connect(function(Child)
        if getgenv().SlashOfFuryDetection and Child.Name == 'ComboCounter' then
            local Sof_Label = Child:FindFirstChildOfClass('TextLabel')

            if Sof_Label then
                repeat
                    local Slashes_Counter = tonumber(Sof_Label.Text)

                    if Slashes_Counter and Slashes_Counter < 32 then
                        Auto_Parry.Parry(Selected_Parry_Type)
                    end

                    task.wait()

                until not Sof_Label.Parent or not Sof_Label
            end
        end
    end)
end)

Runtime.ChildAdded:Connect(function(Object)
    local Name = Object.Name
    if getgenv().PhantomV2Detection then
        if Name == 'maxTransmission' or Name == 'transmissionpart' then
            local Weld = Object:FindFirstChildWhichIsA('WeldConstraint')
            if Weld then
                local Character = Players.LocalPlayer.Character or Players.LocalPlayer.CharacterAdded:Wait()
                if Character and Weld.Part1 == Character.HumanoidRootPart then
                    CurrentBall = GetBall()
                    Weld:Destroy()
    
                    if CurrentBall then
                        local FocusConnection
                        FocusConnection = RunService.RenderStepped:Connect(function()
                            local Highlighted = CurrentBall:GetAttribute('highlighted')
    
                            if Highlighted == true then
                                Player.Character.Humanoid.WalkSpeed = 36
    
                                local HumanoidRootPart = Character:FindFirstChild('HumanoidRootPart')
                                if HumanoidRootPart then
                                    local PlayerPosition = HumanoidRootPart.Position
                                    local BallPosition = CurrentBall.Position
                                    local PlayerToBall = (BallPosition - PlayerPosition).Unit
    
                                    Player.Character.Humanoid:Move(PlayerToBall, false)
                                end
    
                            elseif Highlighted == false then
                                FocusConnection:Disconnect()
    
                                Player.Character.Humanoid.WalkSpeed = 10
                                Player.Character.Humanoid:Move(Vector3.new(0, 0, 0), false)
    
                                task.delay(3, function()
                                    Player.Character.Humanoid.WalkSpeed = 36
                                end)
    
                                CurrentBall = nil
                            end
                        end)
    
                        task.delay(3, function()
                            if FocusConnection and FocusConnection.Connected then
                                FocusConnection:Disconnect()
    
                                Player.Character.Humanoid:Move(Vector3.new(0, 0, 0), false)
                                Player.Character.Humanoid.WalkSpeed = 36
                                CurrentBall = nil
                            end
                        end)
                    end
                end
            end
        end
    end
end)

local function isCooldownInEffect1(uigradient)
    return uigradient.Offset.Y < 0.4
end

local function cooldownProtection()
    if isCooldownInEffect1(ParryCD) then
        game:GetService('ReplicatedStorage').Remotes.AbilityButtonPress:Fire()
        return true
    end
    return false
end

local Section1 = Tab:Section({Title = 'Auto Parry', Side = 'Left'})
local Section2 = Tab:Section({Title = 'Auto Spam Parry', Side = 'Right'})
local Section3 = Tab:Section({Title = 'Manual Spam', Side = 'Left'})
local Section4 = Tab:Section({Title = 'Lobby Auto Parry', Side = 'Right'})

Section1:Toggle({
	Title = 'Auto Parry',
	Value = false,
	Callback = function(value)
        if value then
            Connections_Manager['Auto Parry'] = RunService.PreSimulation:Connect(function()
                local Balls = Auto_Parry.Get_Balls()

                for _, Ball in pairs(Balls) do
                    if not Ball then
                        return
                    end
                    local Zoomies = Ball:FindFirstChild('zoomies')
                    if not Zoomies then
                        return
                    end
                    if Parried then
                        Ball:GetAttributeChangedSignal('target'):Wait()
                        Parried = false
                    end

                    local Ball_Target = Ball:GetAttribute('target')
                    local Velocity = Zoomies.VectorVelocity
                    local Distance = Player:DistanceFromCharacter(Ball.Position)
                    local Ping = game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue() / 10
                    local Ping_Threshold = math.clamp(Ping / 10, 5, 17)
                    local Speed = Velocity.Magnitude
                    local cappedSpeedDiff = math.min(math.max(Speed - 9.5, 0), 650)
                    local speed_divisor_base = 2.4 + cappedSpeedDiff * 0.002

                    local effectiveMultiplier = Speed_Divisor_Multiplier
                    if getgenv().RandomParryAccuracyEnabled then
                        if Speed < 200 then
                            effectiveMultiplier = 0.7 + (math.random(40, 100) - 1) * (0.35 / 99)
                        else
                            effectiveMultiplier = 0.7 + (math.random(1, 100) - 1) * (0.35 / 99)
                        end
                    end

                    local speed_divisor = speed_divisor_base * effectiveMultiplier
                    local Parry_Accuracy = Ping_Threshold + math.max(Speed / speed_divisor, 9.5)

                    if Ball:FindFirstChild('AeroDynamicSlashVFX') then
                        Debris:AddItem(Ball.AeroDynamicSlashVFX, 0)
                        Tornado_Time = tick()
                    end

                    if Runtime:FindFirstChild('Tornado') then
                        if (tick() - Tornado_Time) < (Runtime.Tornado:GetAttribute('TornadoTime') or 1) + 0.314159 then
                            return
                        end
                    end

                    if Auto_Parry.Is_Curved() then
                        return
                    end

                    if Ball:FindFirstChild('ComboCounter') then
                        return
                    end

                    if Player.Character.PrimaryPart:FindFirstChild('SingularityCape') then
                        return
                    end

                    if getgenv().InfinityDetection and Infinity then
                        return
                    end

                    if getgenv().DeathSlashDetection and deathshit then
                        return
                    end

                    if getgenv().TimeHoleDetection and timehole then
                        return
                    end

                    if Ball_Target == tostring(Player) and Distance <= Parry_Accuracy then
                        if getgenv().CooldownProtection and cooldownProtection() then
                            return
                        end
                        local Parry_Time = os.clock()
                        local Time_View = Parry_Time - (Last_Parry)
                        if Time_View > 0.5 then
                            Auto_Parry.Parry_Animation()
                        end
                        if getgenv().AutoParryKeypress then
                            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.F, false, nil)
                        else
                            Auto_Parry.Parry(Selected_Parry_Type)
                        end
                        Last_Parry = Parry_Time
                        Parried = true
                    end
                    local Last_Parrys = tick()
                    repeat RunService.PreSimulation:Wait()
                    until (tick() - Last_Parrys) >= 1 or not Parried
                    Parried = false
                end
            end)
        else
            if Connections_Manager['Auto Parry'] then
                Connections_Manager['Auto Parry']:Disconnect()
                Connections_Manager['Auto Parry'] = nil
            end
        end
	end,
})

Section1:Slider({
	Title = 'Parry Accuracy',
	Min = 1,
	Max = 100,
	Value = 100,
	Callback = function(value)
		Speed_Divisor_Multiplier = 0.7 + (value - 1) * (0.35 / 99)
	end,
})

local parryTypeMap = {
    ['Camera'] = 'Camera',
    ['Random'] = 'Random',
    ['Backwards'] = 'Backwards',
    ['Straight'] = 'Straight',
    ['High'] = 'High',
    ['Left'] = 'Left',
    ['Right'] = 'Right',
    ['Random Target'] = 'RandomTarget'
}

Section1:Dropdown({
	Title = 'Curve Type',
	List = {
		'Camera',
		'Random',
		'Backwards',
		'Straight',
		'High',
		'Left',
		'Right',
		'Random Target'
	},
	Value = 'Camera',
	Multi = false,
	Callback = function(value)
		Selected_Parry_Type = parryTypeMap[value] or value
	end,
})

Section1:Label({
    Title = 'Detection'
})

Section1:Toggle({
	Title = 'Infinity Detection',
	Value = false,
	Callback = function(value)
        getgenv().InfinityDetection = value
	end,
})

Section1:Toggle({
	Title = 'DeathSlash Detection',
	Value = false,
	Callback = function(value)
        getgenv().DeathSlashDetection = value
	end,
})

Section1:Toggle({
	Title = 'TimeHole Detection',
	Value = false,
	Callback = function(value)
        getgenv().TimeHoleDetection = value
	end,
})

Section1:Toggle({
    Title = "Slash Of Fury Detection",
    Value = false,
    callback = function(value)
        getgenv().SlashOfFuryDetection = value
    end,
})

Section1:Toggle({
    Title = "Phantom Detection",
    Value = false,
    callback = function(value)
        getgenv().PhantomV2Detection = value
    end,
})

Section1:Toggle({
    Title = "Cooldown Protection",
    Value = false,
    callback = function(value)
        getgenv().CooldownProtection = value
    end,
})

Section1:Label({
    Title = 'Other'
})

Section1:Toggle({
	Title = 'Random Parry Accuracy',
	Value = false,
	Callback = function(value)
        getgenv().RandomParryAccuracyEnabled = value
	end,
})

Section1:Toggle({
	Title = 'Keypress',
	Value = false,
	Callback = function(value)
        getgenv().AutoParryKeypress = value
	end,
})

Section2:Toggle({
	Title = 'Auto Spam Parry',
	Value = false,
	Callback = function(value)
        if value then
            Connections_Manager['Auto Spam'] = RunService.PreSimulation:Connect(function()
                local Ball = Auto_Parry.Get_Ball()

                if not Ball then
                    return
                end

                local Zoomies = Ball:FindFirstChild('zoomies')

                if not Zoomies then
                    return
                end

                Auto_Parry.Closest_Player()

                local Ping = game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue()

                local Ping_Threshold = math.clamp(Ping / 10, 1, 16)

                local Ball_Target = Ball:GetAttribute('target')

                local Ball_Properties = Auto_Parry:Get_Ball_Properties()
                local Entity_Properties = Auto_Parry:Get_Entity_Properties()

                local Spam_Accuracy = Auto_Parry.Spam_Service({
                    Ball_Properties = Ball_Properties,
                    Entity_Properties = Entity_Properties,
                    Ping = Ping_Threshold
                })

                local Target_Position = Auto_Parry.Closest_Player().PrimaryPart.Position
                local Target_Distance = Player:DistanceFromCharacter(Target_Position)

                local Distance = Player:DistanceFromCharacter(Ball.Position)

                if not Ball_Target then
                    return
                end

                if Target_Distance > Spam_Accuracy or Distance > Spam_Accuracy then
                    return
                end

                local Pulsed = Player.Character:GetAttribute('Pulsed')

                if Pulsed then
                    return
                end

                if Ball_Target == tostring(Player) and Target_Distance > 30 and Distance > 30 then
                    return
                end

                if Distance <= Spam_Accuracy and Parries > ParryThreshold then
                    if getgenv().SpamParryKeypress then
                        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.F, false, game)
                    else
                        Auto_Parry.Parry(Selected_Parry_Type)
                    end
                end
            end)
        else
            if Connections_Manager['Auto Spam'] then
                Connections_Manager['Auto Spam']:Disconnect()
                Connections_Manager['Auto Spam'] = nil
            end
        end
	end,
})

Section2:Dropdown({
	Title = 'First Parry Type',
	List = {
        'F_Key',
        'Left_Click',
        'Navigation'
    },
	Value = 'F_Key',
	Multi = false,
	Callback = function(value)
		firstParryType = tostring(value)
	end,
})

Section2:Slider({
	Title = 'Parry Threshold',
	Min = 1,
	Max = 3,
    Round = 1,
	Value = 1,
	Callback = function(value)
		ParryThreshold = value
	end,
})

if not isMobile then
    Section2:Toggle({
        Title = 'Animation Fix',
        Value = false,
        Callback = function(value)
            if value then
                Connections_Manager['Animation Fix'] = RunService.PreSimulation:Connect(function()
                    local Ball = Auto_Parry.Get_Ball()
                    if not Ball then
                        return
                    end
                    if not Ball:FindFirstChild('zoomies') then
                        return
                    end

                    Auto_Parry.Closest_Player()

                    local Ping = game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue()

                    local Ping_Threshold = math.clamp(Ping / 10, 10, 16)

                    local Ball_Target = Ball:GetAttribute('target')

                    local Ball_Properties = Auto_Parry:Get_Ball_Properties()
                    local Entity_Properties = Auto_Parry:Get_Entity_Properties()

                    local Spam_Accuracy = Auto_Parry.Spam_Service({
                        Ball_Properties = Ball_Properties,
                        Entity_Properties = Entity_Properties,
                        Ping = Ping_Threshold
                    })

                    local Target_Position = Auto_Parry.Closest_Player().PrimaryPart.Position
                    local Target_Distance = Player:DistanceFromCharacter(Target_Position)
                    local Distance = Player:DistanceFromCharacter(Ball.Position)

                    if not Ball_Target then
                        return
                    end

                    if Target_Distance > Spam_Accuracy or Distance > Spam_Accuracy then
                        return
                    end
                    
                    local Pulsed = Player.Character:GetAttribute('Pulsed')

                    if Pulsed then
                        return
                    end

                    if Ball_Target == tostring(Player) and Target_Distance > 30 and Distance > 30 then
                        return
                    end

                    local threshold = ParryThreshold

                    if Distance <= Spam_Accuracy and Parries > threshold then
                        if getgenv().SpamParryKeypress then
                            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.F, false, game) 
                        else
                            Auto_Parry.Parry(Selected_Parry_Type)
                        end
                    end
                end)
            else
                if Connections_Manager['Animation Fix'] then
                    Connections_Manager['Animation Fix']:Disconnect()
                    Connections_Manager['Animation Fix'] = nil
                end
            end
        end,
    })
end

Section2:Toggle({
	Title = 'Keypress',
	Value = false,
	Callback = function(value)
        getgenv().SpamParryKeypress = value
	end,
})

Section3:Toggle({
	Title = 'Manual Spam Parry',
	Value = false,
	Callback = function(value)
        if value then
            Connections_Manager['Manual Spam'] = RunService.PreSimulation:Connect(function()
                if getgenv().spamui then
                    return
                end

                if getgenv().ManualSpamKeypress then
                    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.F, false, game) 
                else
                    Auto_Parry.Parry(Selected_Parry_Type)
                end

            end)
        else
            if Connections_Manager['Manual Spam'] then
                Connections_Manager['Manual Spam']:Disconnect()
                Connections_Manager['Manual Spam'] = nil
            end
        end
	end,
})

if isMobile then
    Section3:Toggle({
        Title = 'UI',
        Value = false,
        Callback = function(value)
            getgenv().spamui = value
            if value then
                local gui = Instance.new('ScreenGui')
                gui.Name = 'ManualSpamUI'
                gui.ResetOnSpawn = false
                gui.Parent = game.CoreGui

                local frame = Instance.new('Frame')
                frame.Name = 'MainFrame'
                frame.Position = UDim2.new(0, 20, 0, 20)
                frame.Size = UDim2.new(0, 200, 0, 100)
                frame.BackgroundColor3 = Color3.fromRGB(10, 10, 50)
                frame.BackgroundTransparency = 0.3
                frame.BorderSizePixel = 0
                frame.Active = true
                frame.Draggable = true
                frame.Parent = gui

                local uiCorner = Instance.new('UICorner')
                uiCorner.CornerRadius = UDim.new(0, 12)
                uiCorner.Parent = frame

                local uiStroke = Instance.new('UIStroke')
                uiStroke.Thickness = 2
                uiStroke.Color = Color3.new(0, 0, 0)
                uiStroke.Parent = frame

                local button = Instance.new('TextButton')
                button.Name = 'ClashModeButton'
                button.Text = 'Clash Mode'
                button.Size = UDim2.new(0, 160, 0, 40)
                button.Position = UDim2.new(0.5, -80, 0.5, -20)
                button.BackgroundTransparency = 1
                button.BorderSizePixel = 0
                button.Font = Enum.Font.GothamSemibold
                button.TextColor3 = Color3.new(1, 1, 1)
                button.TextSize = 22
                button.Parent = frame

                local activated = false

                local function toggle()
                    activated = not activated
                    button.Text = activated and 'Stop' or 'Clash Mode'
                    if activated then
                        Connections_Manager['Manual Spam UI'] = game:GetService('RunService').Heartbeat:Connect(function()
                            Auto_Parry.Parry(Selected_Parry_Type)
                        end)
                    else
                        if Connections_Manager['Manual Spam UI'] then
                            Connections_Manager['Manual Spam UI']:Disconnect()
                            Connections_Manager['Manual Spam UI'] = nil
                        end
                    end
                end

                button.MouseButton1Click:Connect(toggle)
            else
                if game.CoreGui:FindFirstChild('ManualSpamUI') then
                    game.CoreGui:FindFirstChild('ManualSpamUI'):Destroy()
                end

                if Connections_Manager['Manual Spam UI'] then
                    Connections_Manager['Manual Spam UI']:Disconnect()
                    Connections_Manager['Manual Spam UI'] = nil
                end
            end
        end,
    })
end

Section3:Toggle({
	Title = 'Keypress',
	Value = false,
	Callback = function(value)
        getgenv().ManualSpamKeypress = value
	end,
})

Section4:Toggle({
	Title = 'Lobby Auto Parry',
	Value = false,
	Callback = function(value)
        if value then
            Connections_Manager['Lobby AP'] = RunService.Heartbeat:Connect(function()
                local Ball = Auto_Parry.Lobby_Balls()
                if not Ball then
                    return
                end

                local Zoomies = Ball:FindFirstChild('zoomies')
                if not Zoomies then
                    return
                end

                Ball:GetAttributeChangedSignal('target'):Once(function()
                    Training_Parried = false
                end)

                if Training_Parried then
                    return
                end

                local Ball_Target = Ball:GetAttribute('target')
                local Velocity = Zoomies.VectorVelocity
                local Distance = Player:DistanceFromCharacter(Ball.Position)
                local Speed = Velocity.Magnitude

                local Ping = game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue() / 10
                local LobbyAPcappedSpeedDiff = math.min(math.max(Speed - 9.5, 0), 650)
                local LobbyAPspeed_divisor_base = 2.4 + LobbyAPcappedSpeedDiff * 0.002

                local LobbyAPeffectiveMultiplier = LobbyAP_Speed_Divisor_Multiplier
                if getgenv().LobbyAPRandomParryAccuracyEnabled then
                    LobbyAPeffectiveMultiplier = 0.7 + (math.random(1, 100) - 1) * (0.35 / 99)
                end

                local LobbyAPspeed_divisor = LobbyAPspeed_divisor_base * LobbyAPeffectiveMultiplier
                local LobbyAPParry_Accuracys = Ping + math.max(Speed / LobbyAPspeed_divisor, 9.5)

                if Ball_Target == tostring(Player) and Distance <= LobbyAPParry_Accuracys then
                        if getgenv().LobbyAPKeypress then
                            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.F, false, game) 
                        else
                            Auto_Parry.Parry(Selected_Parry_Type)
                        end
                    Training_Parried = true
                end
                local Last_Parrys = tick()
                repeat 
                    RunService.PreSimulation:Wait() 
                until (tick() - Last_Parrys) >= 1 or not Training_Parried
                Training_Parried = false
            end)
        else
            if Connections_Manager['Lobby AP'] then
                Connections_Manager['Lobby AP']:Disconnect()
                Connections_Manager['Lobby AP'] = nil
            end
        end
	end,
})

Section4:Slider({
	Title = 'Parry Accuracy',
	Min = 1,
	Max = 100,
	Value = 100,
	Callback = function(value)
		LobbyAP_Speed_Divisor_Multiplier = 0.7 + (value - 1) * (0.35 / 99)
	end,
})

Section4:Toggle({
	Title = 'Random Parry Accuracy',
	Value = false,
	Callback = function(value)
        getgenv().LobbyAPRandomParryAccuracyEnabled = value
	end,
})

Section4:Toggle({
	Title = 'Keypress',
	Value = false,
	Callback = function(value)
        getgenv().LobbyAPKeypress = value
	end,
})

local Section5 = Tab:Section({Title = 'Player', Side = 'Left'})
local Section6 = Tab:Section({Title = 'Misc', Side = 'Right'})

Section5:Slider({
	Title = 'Walk Speed',
	Min = 1,
	Max = 300,
	Value = 10,
	Callback = function(s)
		Player.Character.Humanoid.WalkSpeed = s
	end,
})

Section5:Slider({
	Title = 'Jump Power',
	Min = 1,
	Max = 100,
	Value = 30,
	Callback = function(s)
		Player.Character.Humanoid.JumpPower = s
	end,
})

PlayerList = {}

for i, v in pairs(Players:GetChildren()) do
    table.insert(PlayerList, v.Name)
end

Section6:Dropdown({
	Title = 'Select Player',
	List = PlayerList,
	Value = '',
	Multi = false,
	Callback = function(value)
		getgenv().SelectPlayer = value
	end,
})

Section6:Button({
    Title = 'Refrash Player List',
    Callback = function()
        table.clear(PlayerList, v.Name)
        table.insert(PlayerList, v.Name)
    end,
})

Section6:Button({
    Title = 'Teleport Player',
    Callback = function()
        Player.Character.HumanoidRootPart.CFrame = Players[getgenv().SelectPlayer].Character.HumanoidRootPart.CFrame
    end,
})



ReplicatedStorage.Remotes.ParrySuccessAll.OnClientEvent:Connect(function(_, root)
    if root.Parent and root.Parent ~= Player.Character then
        if root.Parent.Parent ~= Workspace.Alive then
            return
        end
    end

    Auto_Parry.Closest_Player()

    local Ball = Auto_Parry.Get_Ball()

    if not Ball then
        return
    end
    if not Auto_Parry.Closest_Player() then
        return
    end

    local Target_Distance = (Player.Character.HumanoidRootPart.Position - Auto_Parry.Closest_Player().PrimaryPart.Position).Magnitude
    local Distance = (Player.Character.HumanoidRootPart.Position - Ball.Position).Magnitude
    local Direction = (Player.Character.HumanoidRootPart.Position - Ball.Position).Unit
    local Dot = Direction:Dot(Ball.AssemblyLinearVelocity.Unit)

    local Curve_Detected = Auto_Parry.Is_Curved()
    if Target_Distance < 15 and Distance < 15 and Dot > -0.25 then
        if Curve_Detected then
            Auto_Parry.Parry(Selected_Parry_Type)
        end
    end

    if not Grab_Parry then
        return
    end

    Grab_Parry:Stop()
end)

ReplicatedStorage.Remotes.ParrySuccess.OnClientEvent:Connect(function()
    if Player.Character.Parent ~= Workspace.Alive then
        return
    end

    if not Grab_Parry then
        return
    end

    Grab_Parry:Stop()
end)

Workspace.Balls.ChildAdded:Connect(function()
    Parried = false
end)

Workspace.Balls.ChildRemoved:Connect(function(Value)
    Parries = 0
    Parried = false

    if Connections_Manager['Target Change'] then
        Connections_Manager['Target Change']:Disconnect()
        Connections_Manager['Target Change'] = nil
    end
end)

ReplicatedStorage.Remotes.Phantom.OnClientEvent:Connect(function(a, b)
    if b.Name == Player.Name then
        Phantom = true
    else
        Phantom = false
    end
end)

Workspace.Balls.ChildAdded:Connect(function()
    Parried = false
end)

Workspace.Balls.ChildRemoved:Connect(function(Value)
    Parries = 0
    Parried = false

    if Connections_Manager['Target Change'] then
        Connections_Manager['Target Change']:Disconnect()
        Connections_Manager['Target Change'] = nil
    end
end)
